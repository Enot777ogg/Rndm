import logging
import sqlite3
import random
import asyncio
from datetime import datetime, timedelta
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    InputMediaPhoto, ParseMode
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters, ConversationHandler
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ADMIN_USERNAME = "bytravka"

(
    CREATE_DESC,
    CREATE_PHOTO,
    CREATE_DATETIME,
    CREATE_GROUP,
    CONFIRMATION
) = range(5)

conn = sqlite3.connect('rndm_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ posted (0 - –Ω–µ—Ç, 1 - –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ)
cursor.execute('''
CREATE TABLE IF NOT EXISTS contests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    description TEXT NOT NULL,
    photo_file_id TEXT,
    post_datetime TEXT NOT NULL,
    group_chat_id TEXT NOT NULL,
    posted INTEGER DEFAULT 0
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS participants (
    contest_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    username TEXT,
    PRIMARY KEY (contest_id, user_id)
)
''')
conn.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä—Å–æ–≤", callback_data='list_contests')],
        [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data='join')],
    ]
    if update.effective_user.username == ADMIN_USERNAME:
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å", callback_data='create_contest')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rndm Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def list_contests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    cursor.execute("SELECT id, description, post_datetime FROM contests ORDER BY id DESC")
    contests = cursor.fetchall()
    if not contests:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤.")
        return
    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã:\n\n"
    for c in contests:
        cid, desc, dt = c
        text += f"ID: {cid}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {dt}\n\n"
    await query.edit_message_text(text)

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()
    cursor.execute("SELECT id, description FROM contests ORDER BY id DESC")
    contests = cursor.fetchall()
    if not contests:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è.")
        return
    keyboard = [
        [InlineKeyboardButton(f"{c[1]} (ID: {c[0]})", callback_data=f"join_{c[0]}")]
        for c in contests
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def join_contest_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()
    contest_id = int(query.data.split('_')[1])
    cursor.execute("SELECT 1 FROM contests WHERE id=?", (contest_id,))
    if not cursor.fetchone():
        await query.edit_message_text("–¢–∞–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ—Ç.")
        return
    cursor.execute("SELECT 1 FROM participants WHERE contest_id=? AND user_id=?", (contest_id, user.id))
    if cursor.fetchone():
        await query.edit_message_text("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ.")
        return
    cursor.execute("INSERT INTO participants (contest_id, user_id, username) VALUES (?, ?, ?)", (contest_id, user.id, user.username or ""))
    conn.commit()
    await query.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!")

async def create_contest_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.callback_query.from_user
    if user.username != ADMIN_USERNAME:
        await update.callback_query.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å—ã", show_alert=True)
        return
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:")
    return CREATE_DESC

async def create_contest_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contest_desc'] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    return CREATE_PHOTO

async def create_contest_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo
    if not photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ /skip:")
        return CREATE_PHOTO
    context.user_data['contest_photo'] = photo[-1].file_id
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15 18:30):")
    return CREATE_DATETIME

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contest_photo'] = None
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15 18:30):")
    return CREATE_DATETIME

async def create_contest_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        dt = datetime.strptime(text, "%Y-%m-%d %H:%M")
        context.user_data['contest_datetime'] = dt.strftime("%Y-%m-%d %H:%M")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return CREATE_DATETIME
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890):")
    return CREATE_GROUP

async def create_contest_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_id = update.message.text.strip()
    if not group_id.startswith("-100") or not group_id[1:].isdigit():
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return CREATE_GROUP
    context.user_data['contest_group'] = group_id
    desc = context.user_data['contest_desc']
    photo = context.user_data['contest_photo']
    dt = context.user_data['contest_datetime']
    group = context.user_data['contest_group']
    msg = (f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
           f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
           f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {dt}\n"
           f"–ì—Ä—É–ø–ø–∞: {group}\n"
           f"–ö–∞—Ä—Ç–∏–Ω–∫–∞: {'–µ—Å—Ç—å' if photo else '–Ω–µ—Ç'}\n\n"
           f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ /confirm –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ /cancel")
    await update.message.reply_text(msg)
    return CONFIRMATION

async def confirm_create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    desc = context.user_data['contest_desc']
    photo = context.user_data['contest_photo']
    dt = context.user_data['contest_datetime']
    group = context.user_data['contest_group']
    cursor.execute(
        "INSERT INTO contests (description, photo_file_id, post_datetime, group_chat_id) VALUES (?, ?, ?, ?)",
        (desc, photo, dt, group)
    )
    conn.commit()
    await update.message.reply_text("‚úÖ –ö–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω!")
    return ConversationHandler.END

async def cancel_create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def pick_winner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username != ADMIN_USERNAME:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")
        return
    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pickwinner <id_–∫–æ–Ω–∫—É—Ä—Å–∞>")
        return
    try:
        contest_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–Ω–∫—É—Ä—Å–∞.")
        return

    cursor.execute("SELECT user_id, username FROM participants WHERE contest_id=?", (contest_id,))
    participants = cursor.fetchall()

    if not participants:
        await update.message.reply_text("‚ùó –í —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    winner = random.choice(participants)
    winner_id, winner_username = winner

    await update.message.reply_text(
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–æ–Ω–∫—É—Ä—Å–∞ {contest_id}:\n@{winner_username} (id: {winner_id})"
    )

    for user_id, username in participants:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=(f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–æ–Ω–∫—É—Ä—Å–∞ #{contest_id} ‚Äî @{winner_username}!\n"
                      f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
            )
        except Exception:
            pass

async def publish_contests(app):
    while True:
        now = datetime.now()
        cursor.execute("SELECT id, description, photo_file_id, group_chat_id FROM contests WHERE posted=0 AND post_datetime<=?", (now.strftime("%Y-%m-%d %H:%M"),))
        contests_to_post = cursor.fetchall()
        for contest in contests_to_post:
            cid, desc, photo_file_id, group_id = contest
            try:
                if photo_file_id:
                    await app.bot.send_photo(
                        chat_id=group_id,
                        photo=photo_file_id,
                        caption=f"üì¢ –ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å!\n\n{desc}"
                    )
                else:
                    await app.bot.send_message(
                        chat_id=group_id,
                        text=f"üì¢ –ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å!\n\n{desc}"
                    )
                cursor.execute("UPDATE contests SET posted=1 WHERE id=?", (cid,))
                conn.commit()
                logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∫–æ–Ω–∫—É—Ä—Å {cid} –≤ –≥—Ä—É–ø–ø–µ {group_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ {cid}: {e}")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data == "list_contests":
        await list_contests(update, context)
    elif data == "join":
        await join(update, context)
    elif data.startswith("join_"):
        await join_contest_callback(update, context)
    elif data == "create_contest":
        await create_contest_start(update, context)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def main():
    TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("pickwinner", pick_winner))
    app.add_handler(CallbackQueryHandler(callback_handler))

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(create_contest_start, pattern="create_contest")],
        states={
            CREATE_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_contest_desc)],
            CREATE_PHOTO: [MessageHandler(filters.PHOTO, create_contest_photo),
                           CommandHandler('skip', skip_photo)],
            CREATE_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_contest_datetime)],
            CREATE_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_contest_group)],
            CONFIRMATION: [CommandHandler("confirm", confirm_create),
                           CommandHandler("cancel", cancel_create)],
        },
        fallbacks=[CommandHandler("cancel", cancel_create)]
    )
    app
