import os
import sqlite3
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CallbackQueryHandler,
    CommandHandler,
)
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")

conn = sqlite3.connect("participants.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS participants (
    user_id INTEGER PRIMARY KEY,
    username TEXT
)
""")
conn.commit()

# –ú–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu(is_admin: bool):
    buttons = [
        [InlineKeyboardButton("üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join")],
        [InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="members")],
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton("üèÜ –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", callback_data="winner")])
    return InlineKeyboardMarkup(buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    is_admin = (user.username == ADMIN_USERNAME)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_menu(is_admin)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    is_admin = (user.username == ADMIN_USERNAME)
    await query.answer()

    if query.data == "join":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        try:
            member = await context.bot.get_chat_member(CHANNEL_USERNAME, user.id)
            if member.status not in ["member", "administrator", "creator"]:
                await context.bot.send_message(user.id, "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.")
                return
        except Exception:
            await context.bot.send_message(user.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        try:
            cursor.execute("INSERT INTO participants (user_id, username) VALUES (?, ?)", (user.id, user.username))
            conn.commit()
            await context.bot.send_message(user.id, "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –¥–ª—è —É—á–∞—Å—Ç–∏—è!")
        except sqlite3.IntegrityError:
            await context.bot.send_message(user.id, "üîÅ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")

    elif query.data == "members":
        cursor.execute("SELECT COUNT(*) FROM participants")
        count = cursor.fetchone()[0]
        await context.bot.send_message(user.id, f"üë• –°–µ–π—á–∞—Å —É—á–∞—Å—Ç–≤—É–µ—Ç: {count} —á–µ–ª–æ–≤–µ–∫.")

    elif query.data == "winner":
        if not is_admin:
            await context.bot.send_message(user.id, "‚õî –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
            return

        cursor.execute("SELECT user_id, username FROM participants ORDER BY RANDOM() LIMIT 1")
        winner = cursor.fetchone()
        if winner:
            winner_id, winner_username = winner
            text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner_username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {winner_id})"
            await context.bot.send_message(user.id, text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
            cursor.execute("SELECT user_id FROM participants")
            participants = cursor.fetchall()
            for (uid,) in participants:
                try:
                    await context.bot.send_message(uid, text)
                except:
                    pass
        else:
            await context.bot.send_message(user.id, "‚ùó –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")

    # –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
    if query.message:
        await query.message.edit_reply_markup(reply_markup=main_menu(is_admin))

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
