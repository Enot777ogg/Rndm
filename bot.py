import os
import logging
import datetime
import random
import aiosqlite

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import Forbidden
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")

logging.basicConfig(level=logging.INFO)


async def init_db():
    async with aiosqlite.connect("lottery.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS participants (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE,
                chat_id INTEGER,
                joined_at TEXT
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS winners (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                method TEXT,
                picked_at TEXT
            )
        """)
        await db.commit()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data='join')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:",
        reply_markup=reply_markup
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data='join')],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data='list')],
        [InlineKeyboardButton("üéØ –†–æ–∑—ã–≥—Ä—ã—à", callback_data='pick')],
        [InlineKeyboardButton("üîÅ –°–±—Ä–æ—Å", callback_data='reset')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìã –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    chat_id = user.id
    username = user.username or user.full_name

    if query.data == 'join':
        try:
            member = await context.bot.get_chat_member(CHANNEL_USERNAME, user.id)
            if member.status not in ["member", "administrator", "creator"]:
                await query.edit_message_text("‚õî –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.")
                return
        except Exception:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")
            return

        async with aiosqlite.connect("lottery.db") as db:
            await db.execute(
                "INSERT OR IGNORE INTO participants (name, chat_id, joined_at) VALUES (?, ?, ?)",
                (username, chat_id, datetime.datetime.now().isoformat())
            )
            await db.commit()

        await query.edit_message_text(f"{username}, —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")

        try:
            await context.bot.send_message(
                chat_id=user.id,
                text="üéâ –¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! –ú—ã –Ω–∞–ø–∏—à–µ–º —Ç–µ–±–µ, –µ—Å–ª–∏ —Ç—ã –ø–æ–±–µ–¥–∏—à—å."
            )
        except Forbidden:
            print(f"‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° {username}")

    elif query.data == 'list':
        async with aiosqlite.connect("lottery.db") as db:
            async with db.execute("SELECT name FROM participants") as cursor:
                rows = await cursor.fetchall()
        if rows:
            names = "\n".join(name for (name,) in rows)
            await query.edit_message_text(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{names}")
        else:
            await query.edit_message_text("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

    elif query.data == 'pick':
        if user.username != ADMIN_USERNAME:
            await query.edit_message_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")
            return

        async with aiosqlite.connect("lottery.db") as db:
            async with db.execute("SELECT name, chat_id FROM participants") as cursor:
                participants = await cursor.fetchall()

        if not participants:
            await query.edit_message_text("‚ùó –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
            return

        winner = random.choice(participants)
        name, winner_chat_id = winner

        async with aiosqlite.connect("lottery.db") as db:
            await db.execute(
                "INSERT INTO winners (name, method, picked_at) VALUES (?, ?, ?)",
                (name, 'general', datetime.datetime.now().isoformat())
            )
            await db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _, chat in participants:
            try:
                await context.bot.send_message(chat_id=chat, text=f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {name}!")
            except:
                pass

        await query.edit_message_text(f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {name}!")

    elif query.data == 'reset':
        if user.username != ADMIN_USERNAME:
            await query.edit_message_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫.")
            return
        async with aiosqlite.connect("lottery.db") as db:
            await db.execute("DELETE FROM participants")
            await db.commit()
        await query.edit_message_text("‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω.")


async def main():
    await init_db()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(handle_button))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()


if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
