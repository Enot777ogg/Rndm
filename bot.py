import os
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("participants.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS participants (user_id INTEGER PRIMARY KEY, username TEXT)")
conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user.id)
        if member.status not in ["member", "administrator", "creator"]:
            await context.bot.send_message(user.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")
            return
    except Exception as e:
        await context.bot.send_message(user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    try:
        cursor.execute("INSERT INTO participants (user_id, username) VALUES (?, ?)", (user.id, user.username))
        conn.commit()
        await context.bot.send_message(user.id, "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
    except sqlite3.IntegrityError:
        await context.bot.send_message(user.id, "üîÅ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")

# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
async def choose_winner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username != ADMIN_USERNAME:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")
        return

    cursor.execute("SELECT user_id, username FROM participants ORDER BY RANDOM() LIMIT 1")
    result = cursor.fetchone()

    if result:
        user_id, username = result
        message = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞: @{username} (ID: {user_id})"
        await update.message.reply_text("‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω.")
        # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
        cursor.execute("SELECT user_id FROM participants")
        for row in cursor.fetchall():
            try:
                await context.bot.send_message(row[0], message)
            except:
                pass
    else:
        await update.message.reply_text("‚ùó –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("winner", choose_winner))
app.add_handler(CallbackQueryHandler(button_handler))

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç Rndm –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
